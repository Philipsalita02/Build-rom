version: 2.1

jobs:
  build_kernel:
    docker:
      - image: ubuntu:24.04

    steps:
      - run:
          name: Update & Install Dependencies
          command: |
            sudo apt update && sudo apt upgrade -y
            sudo apt install -y \
              bc bison ca-certificates curl flex gcc git libc6-dev libssl-dev \
              openssl python-is-python3 ssh wget zip zstd sudo make clang \
              gcc-arm-linux-gnueabi software-properties-common build-essential \
              libarchive-tools gcc-aarch64-linux-gnu libssl-dev libffi-dev \
              libncurses5-dev zlib1g-dev libreadline-dev libbz2-dev \
              libsqlite3-dev pigz python3 cpio lld llvm g++-aarch64-linux-gnu \
              libelf-dev neofetch binutils-dev ccache cmake file ninja-build \
              python3-dev texinfo u-boot-tools xz-utils libstdc++-11-dev

      - run:
          name: Checkout Kernel Source
          command: |
            git clone --depth=1 -b ksu-new https://github.com/Jayzee-Zee/Bumi-Kernel-Tree-Zee kernel

      - run:
          name: Clone Neutron Clang 19
          command: |
            mkdir -p toolchains
            git clone --depth=1 -b clang-19 https://gitlab.com/LeCmnGend/clang.git toolchains/proton-clang

      - run:
          name: Clone KernelSU-Next
          command: |
            git clone --depth=1 https://github.com/KernelSU-Next/KernelSU-Next.git kernel/KernelSU-Next

      - run:
          name: Build Kernel
          command: |
            cd kernel
            export PATH="$PWD/../toolchains/proton-clang/bin:$PATH"

            mkdir -p out
            make -j$(nproc) O=out ARCH=arm64 CONFIG_LTO_NONE=n CONFIG_LTO_CLANG=y earth_defconfig

            make -j$(nproc) \
              O=out \
              ARCH=arm64 \
              CC=clang \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              LLVM=1 \
              LLVM_IAS=1 \
              LTO=full \
              LD=ld.lld \
              KCFLAGS="-O3 -ffast-math -march=armv8-a+crypto -mtune=cortex-a75" \
              CFLAGS="-O3 -ffast-math -march=armv8-a+crypto -mtune=cortex-a75" \
              CXXFLAGS="-O3 -ffast-math -march=armv8-a+crypto -mtune=cortex-a75"

      - run:
          name: Upload Kernel Image
          command: |
            mkdir -p artifacts
            cp kernel/out/arch/arm64/boot/Image.gz artifacts/Image.gz

      - store_artifacts:
          path: artifacts
          destination: kernel_image

workflows:
  version: 2
  build_and_debug:
    jobs:
      - build_kernel
